// Copyright (C) Microsoft Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// These are the WebView2 experimental APIs published publicly as a part of the
// WebView2 prerelease package. Modifications to any published interface require
// a breaking change for the experimental APIs. Otherwise, do not modify
// published interfaces.

// midl is run from a tools directory with no special include paths setup.
// To import an IDL from the build you must get out of the tools path
// first.
// We include the shipping webview2.idl so that our preview APIs may
// interact with our public APIs.
import "../../edge_embedded_browser/client/win/current/webview2.idl";

[uuid(07abc5eb-fae4-4485-bf29-083ac335408b), version(1.0)]
library WebView2Experimental {

// Forward declarations

interface ICoreWebView2Experimental5;
interface ICoreWebView2Experimental16;
interface ICoreWebView2Experimental18;
interface ICoreWebView2Experimental19;
interface ICoreWebView2ExperimentalCompositionController4;
interface ICoreWebView2ExperimentalEnvironment3;
interface ICoreWebView2ExperimentalExecuteScriptResult;
interface ICoreWebView2ExperimentalExecuteScriptWithResultCompletedHandler;
interface ICoreWebView2ExperimentalScriptException;
interface ICoreWebView2ExperimentalEnvironment10;
interface ICoreWebView2ExperimentalFrame4;
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler;
interface ICoreWebView2ExperimentalUpdateRuntimeResult;
interface ICoreWebView2ExperimentalWebResourceRequestedEventArgs;
interface ICoreWebView2ExperimentalNavigationStartingEventArgs2;

// Enums and structs
/// Specifies the source of `WebResourceRequested` event.
[v1_enum]
typedef enum COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS {
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_NONE = 0,

  /// Indicates that web resource is requested from main page including dedicated workers and iframes.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_DOCUMENT = 1,

  /// Indicates that web resource is requested from shared worker.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SHARED_WORKER = 2,

  /// Indicates that web resource is requested from service worker.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SERVICE_WORKER = 4,

  /// Indicates that web resource is requested from any supported source.
  COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_ALL = 0XFFFFFFFF
} COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS;
cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS)")

/// Matrix that represents a 3D transform. This transform is used to
/// calculate correct coordinates when calling
/// CreateCoreWebView2PointerInfoFromPointerId. This is equivalent to a
/// D2D1_MATRIX_4X4_F
typedef struct COREWEBVIEW2_MATRIX_4X4 {
  /// The value in the first row and first column of the matrix.
  FLOAT _11;
  /// The value in the first row and second column of the matrix.
  FLOAT _12;
  /// The value in the first row and third column of the matrix.
  FLOAT _13;
  /// The value in the first row and fourth column of the matrix.
  FLOAT _14;
  /// The value in the second row and first column of the matrix.
  FLOAT _21;
  /// The value in the second row and second column of the matrix.
  FLOAT _22;
  /// The value in the second row and third column of the matrix.
  FLOAT _23;
  /// The value in the second row and fourth column of the matrix.
  FLOAT _24;
  /// The value in the third row and first column of the matrix.
  FLOAT _31;
  /// The value in the third row and second column of the matrix.
  FLOAT _32;
  /// The value in the third row and third column of the matrix.
  FLOAT _33;
  /// The value in the third row and fourth column of the matrix.
  FLOAT _34;
  /// The value in the fourth row and first column of the matrix.
  FLOAT _41;
  /// The value in the fourth row and second column of the matrix.
  FLOAT _42;
  /// The value in the fourth row and third column of the matrix.
  FLOAT _43;
  /// The value in the fourth row and fourth column of the matrix.
  FLOAT _44;
} COREWEBVIEW2_MATRIX_4X4;

/// Status of UpdateRuntime operation result.
[v1_enum]
typedef enum COREWEBVIEW2_UPDATE_RUNTIME_STATUS {
  /// Latest version of Edge WebView2 Runtime is installed.
  /// No update for Edge WebView2 Runtime is available, or Edge WebView2
  /// Runtime is updated successfully and latest version is now installed.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_LATEST_VERSION_INSTALLED,

  /// Edge WebView2 Runtime update is already running, which could be
  /// triggered by auto update or by other UpdateRuntime request from some app.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING,

  /// Edge WebView2 Runtime update is blocked by group policy.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY,

  /// Edge WebView2 Runtime update failed.
  /// See `ExtendedError` property of UpdateRuntimeResult for more
  /// information about the failure.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED,
} COREWEBVIEW2_UPDATE_RUNTIME_STATUS;

/// Specifies memory usage target level of WebView.
[v1_enum]
typedef enum COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL {
  /// Specifies normal memory usage target level.
  COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL,

  /// Specifies low memory usage target level.
  /// Used for inactivate WebView for reduced memory consumption.
  COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW,

} COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL;

/// Specifies the navigation kind of each navigation.
[v1_enum]
typedef enum COREWEBVIEW2_NAVIGATION_KIND {
  /// A navigation caused by `CoreWebView2.Reload()`, `location.reload()`, the end user
  /// using F5 or other UX, or other reload mechanisms to reload the current document
  /// without modifying the navigation history.
  COREWEBVIEW2_NAVIGATION_KIND_RELOAD = 0,

  /// A navigation back or forward to a different entry in the session navigation history,
  /// like via `CoreWebView2.Back()`, `location.back()`, the end user pressing Alt+Left
  /// or other UX, or other mechanisms to navigate back or forward in the current
  /// session navigation history.
  ///
  // Note: This kind doesn't distinguish back or forward, because we can't
  // distinguish it from origin source `blink.mojom.NavigationType`.
  COREWEBVIEW2_NAVIGATION_KIND_BACK_OR_FORWARD = 1,

  /// A navigation to another document, which can be caused by `CoreWebView2.Navigate()`,
  /// `window.location.href = ...`, or other WebView2 or DOM APIs that navigate to a new URI.
  COREWEBVIEW2_NAVIGATION_KIND_NEW_DOCUMENT = 2,

} COREWEBVIEW2_NAVIGATION_KIND;

// End of enums and structs

/// This interface is an extension of `ICoreWebView2` that manages memory usage
/// target level.
[uuid(E05E04CA-7924-4C04-A84C-A90572DBA22A), object, pointer_default(unique)]
interface ICoreWebView2Experimental5 : IUnknown {

  /// `MemoryUsageTargetLevel` indicates desired memory consumption level of
  /// WebView.
  [propget] HRESULT MemoryUsageTargetLevel(
      [out, retval] COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL* level);

  /// An app may set `MemoryUsageTargetLevel` to indicate desired memory
  /// consumption level of WebView. Scripts will not be impacted and continue
  /// to run. This is useful for inactive apps that still want to run scripts
  /// and/or keep network connections alive and therefore could not call
  /// `TrySuspend` and `Resume` to reduce memory consumption. These apps can
  /// set memory usage target level to `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW`
  /// when the app becomes inactive, and set back to
  /// `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL` when the app becomes
  /// active. It is not necessary to set CoreWebView2Controller's IsVisible
  /// property to false when setting the property.
  /// It is a best effort operation to change memory usage level, and the
  /// API will return before the operation completes.
  /// Setting the level to `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW`
  /// could potentially cause memory for some WebView browser processes to be
  /// swapped out to disk in some circumstances.
  /// It is a best effort to reduce memory usage as much as possible. If a script
  /// runs after its related memory has been swapped out, the memory will be swapped
  /// back in to ensure the script can still run, but performance might be impacted.
  /// Therefore, the app should set the level back to
  /// `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL` when the app becomes
  /// active again. Setting memory usage target level back to normal will not happen
  /// automatically.
  /// An app should choose to use either the combination of `TrySuspend` and `Resume`
  /// or the combination of setting MemoryUsageTargetLevel to low and normal. It is
  /// not advisable to mix them.
  /// Trying to set `MemoryUsageTargetLevel` while suspended will be ignored.
  /// The `TrySuspend` and `Resume` methods will change the `MemoryUsageTargetLevel`.
  /// `TrySuspend` will automatically set `MemoryUsageTargetLevel` to low while
  /// `Resume` on suspended WebView will automatically set `MemoryUsageTargetLevel`
  /// to normal. Calling `Resume` when the WebView is not suspended would not change
  /// `MemoryUsageTargetLevel`.
  ///
  /// \snippet ViewComponent.cpp MemoryUsageTargetLevel
  [propput] HRESULT MemoryUsageTargetLevel(
      [in] COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL level);

}

/// The UpdateRuntime operation result.
[uuid(DD503E49-AB19-47C0-B2AD-6DDD09CC3E3A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeResult : IUnknown {

  /// The status for the UpdateRuntime operation.
  [propget] HRESULT Status(
      [out, retval] COREWEBVIEW2_UPDATE_RUNTIME_STATUS* status);

  /// The update error that occurred while trying to update Edge WebView2 Runtime.
  /// ExtendedError will be S_OK if Status is not `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED`
  /// or `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY`.
  [propget] HRESULT ExtendedError([out, retval] HRESULT* error);
}

/// The caller implements this interface to receive the UpdateRuntime result.
[uuid(F1D2D722-3721-499C-87F5-4C405260697A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler : IUnknown {

  /// Provides the result for the UpdateRuntime operation.
  /// `errorCode` will be S_OK if the update operation can be performed
  /// normally, regardless of whether we could update the Edge WebView2
  /// Runtime. If an unexpected error interrupts the update operation, error
  /// code of that unexpected error would be set as `errorCode`.
  /// When update operation can be performed normally, but update resulted in
  /// failure, like download failed, the error code would be presented as
  /// `ExtendedError` property of ICoreWebView2ExperimentalUpdateRuntimeResult.
  HRESULT Invoke([in] HRESULT errorCode,
                 [in] ICoreWebView2ExperimentalUpdateRuntimeResult* result);
}

/// This interface is an extension of the ICoreWebView2Environment that manages
/// updating Edge WebView2 Runtime. An object implementing the
/// ICoreWebView2ExperimentalEnvironment3 interface will also implement
/// ICoreWebView2Environment.
[uuid(9A2BE885-7F0B-4B26-B6DD-C969BAA00BF1), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment3 : IUnknown {
  /// Try to update the installed Microsoft Edge WebView2 Runtime.
  /// This will potentially result in a new version of the Edge WebView2
  /// Runtime being installed and `NewBrowserVersionAvailable` event being raised.
  /// There is no guarantee on the order of that event being raised and
  /// UpdateRuntime's completed handler being invoked. Besides the
  /// `NewBrowserVersionAvailable` event, there will be no impact to any
  /// currently running WebView2s when the update is installed.
  /// Even though the Edge WebView2 Runtime update is installed for the machine
  /// and available to all users, the update will happen silently and not show
  /// elevation prompt.
  /// This will not impact Edge browser installations.
  /// The latest version can always be queried using the
  /// `GetAvailableCoreWebView2BrowserVersionString` API.
  /// The UpdateRuntime method is only supported for an installed Edge WebView2
  /// Runtime. When running a fixed version Edge WebView2 Runtime or non stable
  /// channel Edge browser, this API will return `HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED)`.
  /// There could only be one active UpdateRuntime operation in an app process,
  /// and calling this API before the completed handler for a previous call is invoked
  /// will fail with `HRESULT_FROM_WIN32(ERROR_BUSY)`.
  /// Calling this API repeatedly in a short period of time, will also fail with
  /// `HRESULT_FROM_WIN32(ERROR_BUSY)`. To protect accidental abuse of the update
  /// service, the implementation throttles the calls of this API to 3 times within
  /// 5 minutes in a process. The exact throttling limit can change in the future.
  /// Edge update service can only support one update request at a time globally.
  /// If there is already an update operation running in the Edge update service,
  /// UpdateRuntime request will result in the completed handler being invoked with a
  /// result that has `Status` of `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING`.
  /// As the running update could succeed or fail, the app should retry later if
  /// `NewBrowserVersionAvailable` event has not been raised.
  /// The UpdateRuntime operation is associated with the CoreWebView2Environment
  /// object and any ongoing UpdateRuntime operation will be aborted when the
  /// associated CoreWebView2Environment along with the CoreWebView2 objects that
  /// are created by the CoreWebView2Environment object are all released. In this
  /// case, the completed handler will be invoked with `S_OK` as `errorCode` and a
  /// result object with `Status` of COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED and
  /// `ExtendedError` as `E_ABORT`.
  ///
  /// \snippet AppWindow.cpp UpdateRuntime
  HRESULT UpdateRuntime(
      [in] ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler* handler);
}

/// This interface is an extension of the ICoreWebView2CompositionController.
/// An object implementing ICoreWebView2ExperimentalCompositionController4
/// interface will also implement ICoreWebView2CompositionController.
[uuid(e6041d7f-18ac-4654-a04e-8b3f81251c33), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalCompositionController4 : IUnknown {
  /// Returns the UI Automation Provider for the WebView.
  [propget] HRESULT AutomationProvider([out, retval] IUnknown** provider);

  /// A helper function to convert a pointerId received from the system into
  /// an ICoreWebView2ExperimentalPointerInfo.
  /// parentWindow is the HWND that contains the WebView. This can be any HWND
  /// in the hwnd tree that contains the WebView.
  /// The COREWEBVIEW2_MATRIX_4X4 is the transform from that HWND to the WebView.
  /// The returned ICoreWebView2ExperimentalPointerInfo is used in SendPointerInfo.
  /// The pointer type must be either pen or touch or the function will fail.
  HRESULT CreateCoreWebView2PointerInfoFromPointerId(
      [in] UINT pointerId,
      [in] HWND parentWindow,
      [in] struct COREWEBVIEW2_MATRIX_4X4 transform,
      [out, retval] ICoreWebView2PointerInfo** pointerInfo);
}

/// This interface is an extension of `ICoreWebView2` that allows to
/// set filters in order to receive WebResourceRequested events for
/// service workers, shared workers and different origin iframes.
[uuid(679ddf3f-9044-486f-8458-16653a0e1603), object, pointer_default(unique)]
interface ICoreWebView2Experimental16 : IUnknown {
  /// A web resource request with a resource context that matches this
  /// filter's resource context and a URI that matches this filter's URI
  /// wildcard string for corresponding request sources will be raised via
  /// the `WebResourceRequested` event. To receive all raised events filters
  /// have to be added before main page navigation.
  ///
  /// The `uri` parameter value is a wildcard string matched against the URI
  /// of the web resource request. This is a glob style
  /// wildcard string in which a `*` matches zero or more characters and a `?`
  /// matches exactly one character.
  /// These wildcard characters can be escaped using a backslash just before
  /// the wildcard character in order to represent the literal `*` or `?`.
  ///
  /// The matching occurs over the URI as a whole string and not limiting
  /// wildcard matches to particular parts of the URI.
  /// The wildcard filter is compared to the URI after the URI has been
  /// normalized, any URI fragment has been removed, and non-ASCII hostnames
  /// have been converted to punycode.
  ///
  /// Specifying a `nullptr` for the uri is equivalent to an empty string which
  /// matches no URIs.
  ///
  /// For more information about resource context filters, navigate to
  /// [COREWEBVIEW2_WEB_RESOURCE_CONTEXT](/microsoft-edge/webview2/reference/win32/icorewebview2#corewebview2_web_resource_context).
  ///
  /// The `requestSourceKinds` is a mask of one or more
  /// `COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS`. OR operation(s) can be
  /// applied to multiple `COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS` to
  /// create a mask representing those data types. API returns `E_INVALIDARG` if
  /// `requestSourceKinds` equals to zero. For more information about request
  /// source kinds, navigate to
  /// [COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS](/microsoft-edge/webview2/reference/win32/icorewebview2#corewebview2_web_resource_request_source_kinds).
  ///
  /// Because service workers and shared workers run separately from any one
  /// HTML document their WebResourceRequested will be raised for all
  /// CoreWebView2s that have appropriate filters added in the corresponding
  /// CoreWebView2Environment. You should only add a WebResourceRequested filter
  /// for COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SERVICE_WORKER or
  /// COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS_SHARED_WORKER on
  /// one CoreWebView2 to avoid handling the same WebResourceRequested
  /// event multiple times.
  ///
  /// | URI Filter String | Request URI | Match | Notes |
  /// | ---- | ---- | ---- | ---- |
  /// | `*` | `https://contoso.com/a/b/c` | Yes | A single * will match all URIs |
  /// | `*://contoso.com/*` | `https://contoso.com/a/b/c` | Yes | Matches everything in contoso.com across all schemes |
  /// | `*://contoso.com/*` | `https://example.com/?https://contoso.com/` | Yes | But also matches a URI with just the same text anywhere in the URI |
  /// | `example` | `https://contoso.com/example` | No | The filter does not perform partial matches |
  /// | `*example` | `https://contoso.com/example` | Yes | The filter matches across URI parts |
  /// | `*example` | `https://contoso.com/path/?example` | Yes | The filter matches across URI parts |
  /// | `*example` | `https://contoso.com/path/?query#example` | No | The filter is matched against the URI with no fragment |
  /// | `*example` | `https://example` | No | The URI is normalized before filter matching so the actual URI used for comparison is `https://example/` |
  /// | `*example/` | `https://example` | Yes | Just like above, but this time the filter ends with a / just like the normalized URI |
  /// | `https://xn--qei.example/` | `https://&#x2764;.example/` | Yes | Non-ASCII hostnames are normalized to punycode before wildcard comparison |
  /// | `https://&#x2764;.example/` | `https://xn--qei.example/` | No | Non-ASCII hostnames are normalized to punycode before wildcard comparison |
  ///
  /// \snippet ScenarioSharedWorkerWRR.cpp WebResourceRequested2
  HRESULT AddWebResourceRequestedFilterWithRequestSourceKinds(
    [in] LPCWSTR const uri,
    [in] COREWEBVIEW2_WEB_RESOURCE_CONTEXT const resourceContext,
    [in] COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS const requestSourceKinds);

  /// Removes a matching WebResource filter that was previously added for the
  /// `WebResourceRequested` event.  If the same filter was added multiple
  /// times, then it must be removed as many times as it was added for the
  /// removal to be effective. Returns `E_INVALIDARG` for a filter that was
  /// not added or is already removed.
  /// If the filter was added for multiple requestSourceKinds and removed just for one of them
  /// the filter remains for the non-removed requestSourceKinds.
  HRESULT RemoveWebResourceRequestedFilterWithRequestSourceKinds(
      [in] LPCWSTR const uri,
      [in] COREWEBVIEW2_WEB_RESOURCE_CONTEXT const resourceContext,
      [in] COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS const requestSourceKinds);
 }

/// Event args for the `WebResourceRequested` event.
[uuid(8f3ec528-0596-4d51-9f9e-2da580ac9787), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalWebResourceRequestedEventArgs : IUnknown {
  /// The web resource requested source.
  [propget] HRESULT RequestedSourceKind(
  [out, retval] COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS* requestedSourceKind);
}

/// A continuation of the ICoreWebView2Settings interface to manage smartscreen.
[uuid(d667d3a7-c1b7-479f-8833-db7547df6687), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalSettings7 : IUnknown {
  /// SmartScreen helps webviews identify reported phishing and malware websites
  /// and also helps users make informed decisions about downloads.
  /// `IsReputationCheckingRequired` is used to control whether SmartScreen
  /// enabled or not. SmartScreen is enabled or disabled for all CoreWebView2s
  /// using the same user data folder. If
  /// CoreWebView2Setting.IsReputationCheckingRequired is true for any
  /// CoreWebView2 using the same user data folder, then SmartScreen is enabled.
  /// If CoreWebView2Setting.IsReputationCheckingRequired is false for all
  /// CoreWebView2 using the same user data folder, then SmartScreen is
  /// disabled. When it is changed, the change will be applied to all WebViews
  /// using the same user data folder on the next navigation or download. The
  /// default value for `IsReputationCheckingRequired` is true. If the newly
  /// created CoreWebview2 does not set SmartScreen to false, when
  /// navigating(Such as Navigate(), LoadDataUrl(), ExecuteScript(), etc.), the
  /// default value will be applied to all CoreWebview2 using the same user data
  /// folder.
  /// \snippet SettingsComponent.cpp ToggleSmartScreen
  [propget] HRESULT IsReputationCheckingRequired([out, retval] BOOL* value);

  /// Sets whether this webview2 instance needs SmartScreen protection for its content.
  /// Set the `IsReputationCheckingRequired` property.
  [propput] HRESULT IsReputationCheckingRequired([in] BOOL value);
}

/// This interface represents a JavaScript exception.
/// If the CoreWebView2.ExecuteScriptWithResult result has Succeeded as false,
/// you can use the result's Exception property to get the script exception.
[uuid(054DAE00-84A3-49FF-BC17-4012A90BC9FD), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalScriptException : IUnknown {
  /// The line number of the source where the exception occurred.
  /// In the JSON it is `exceptionDetail.lineNumber`.
  /// Note that this position starts at 0.
  [propget] HRESULT LineNumber([out, retval] UINT32* value);

  /// The column number of the source where the exception occurred.
  /// In the JSON it is `exceptionDetail.columnNumber`.
  /// Note that this position starts at 0.
  [propget] HRESULT ColumnNumber([out, retval] UINT32* value);
  /// The Name is the exception's class name.
  /// In the JSON it is `exceptionDetail.exception.className`.
  /// This is the empty string if the exception doesn't have a class name.
  /// This can happen if the script throws a non-Error object such as `throw "abc";`
  [propget] HRESULT Name([out, retval] LPWSTR* value);
  /// The Message is the exception's message and potentially stack.
  /// In the JSON it is exceptionDetail.exception.description.
  /// This is the empty string if the exception doesn't have a description.
  /// This can happen if the script throws a non-Error object such as throw "abc";.
  [propget] HRESULT Message([out, retval] LPWSTR* value);
  /// This will return all details of the exception as a JSON string.
  /// In the case that script has thrown a non-Error object such as `throw "abc";`
  /// or any other non-Error object, you can get object specific properties.
  [propget] HRESULT ToJson([out, retval] LPWSTR* value);
}
/// This is the result for ExecuteScriptWithResult.
[uuid(0CE15963-3698-4DF7-9399-71ED6CDD8C9F), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalExecuteScriptResult : IUnknown {
  /// This property is true if ExecuteScriptWithResult successfully executed script with
  /// no unhandled exceptions and the result is available in the ResultAsJson property
  /// or via the TryGetResultAsString method.
  /// If it is false then the script execution had an unhandled exception which you
  /// can get via the Exception property.
  [propget] HRESULT Succeeded([out, retval] BOOL* value);
  /// A function that has no explicit return value returns undefined. If the
  /// script that was run throws an unhandled exception, then the result is
  /// also "null". This method is applied asynchronously. If the method is
  /// run before `ContentLoading`, the script will not be executed
  /// and the string "null" will be returned.

  /// The return value description is as follows
  /// 1. S_OK: Execution succeeds.
  /// 2. E_POINTER: When the `jsonResult` is nullptr.
  [propget] HRESULT ResultAsJson([out, retval] LPWSTR* jsonResult);
  /// If Succeeded is true and the result of script execution is a string, this method provides the value of the string result,
  /// and we will get the `FALSE` var value when the js result is not string type.

  /// The return value description is as follows
  /// 1. S_OK: Execution succeeds.
  /// 2. E_POINTER: When the `stringResult` or `value` is nullptr.
  /// NOTE: If the `value` returns `FALSE`, the `stringResult` will be set to a empty string.
  HRESULT TryGetResultAsString([out] LPWSTR* stringResult, [out] BOOL* value);
  /// If Succeeded is false, you can use this property to get the unhandled exception thrown by script execution
  /// Note that due to the compatibility of the WinRT/.NET interface,
  /// S_OK will be returned even if the acquisition fails.
  /// We can determine whether the acquisition is successful by judging whether the `exception` is nullptr.
  [propget] HRESULT Exception(
      [out, retval] ICoreWebView2ExperimentalScriptException** exception);
}
/// This is the callback for ExecuteScriptWithResult
[uuid(1BB5317B-8238-4C67-A7FF-BAF6558F289D), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalExecuteScriptWithResultCompletedHandler : IUnknown {
  /// Provides the result of ExecuteScriptWithResult
  HRESULT Invoke(
      [in] HRESULT errorCode,
      [in] ICoreWebView2ExperimentalExecuteScriptResult* result);
}
/// This is the interface for getting string and exception with ExecuteScriptWithResult
[uuid(4C765E35-5BEB-4631-B931-5E52D9B0A9BE), object, pointer_default(unique)]
interface ICoreWebView2Experimental19 : IUnknown {

  /// Run JavaScript code from the JavaScript parameter in the current
  /// top-level document rendered in the WebView.
  /// The result of the execution is returned asynchronously in the CoreWebView2ExecuteScriptResult object
  /// which has methods and properties to obtain the successful result of script execution as well as any
  /// unhandled JavaScript exceptions.
  /// If this method is
  /// run after the NavigationStarting event during a navigation, the script
  /// runs in the new document when loading it, around the time
  /// ContentLoading is run. This operation executes the script even if
  /// ICoreWebView2Settings::IsScriptEnabled is set to FALSE.
  ///
  /// \snippet ScriptComponent.cpp ExecuteScriptWithResult
  HRESULT ExecuteScriptWithResult(
      [in] LPCWSTR javaScript,
      [in] ICoreWebView2ExperimentalExecuteScriptWithResultCompletedHandler* handler);
}

/// The NavigationKind API that enables developers to get more information about
/// navigation type.
[uuid(924C5E75-3D03-44DE-A44F-F58C98936ED0), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalNavigationStartingEventArgs2 : IUnknown {

  /// Get the navigation kind of this navigation.
  ///
  [propget] HRESULT NavigationKind([out, retval] COREWEBVIEW2_NAVIGATION_KIND* navigation_kind);
}

/// Representation of a DOM
/// (File)[https://developer.mozilla.org/en-US/docs/Web/API/File] object
/// passed via WebMessage. You can use this object to obtain the path of a
/// File dropped on WebView2.
/// \snippet ScenarioDragDrop.cpp DroppedFilePath
[uuid(f2c19559-6bc1-4583-a757-90021be9afec), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFile : IUnknown {
  /// Get the absolute file path.
  [propget] HRESULT Path([out, retval] LPWSTR* path);
}

/// Read-only collection of generic objects
[uuid(0f36fd87-4f69-4415-98da-888f89fb9a33), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalObjectCollectionView : IUnknown {
  /// Gets the number of items in the collection.
  [propget] HRESULT Count([out, retval] UINT32* value);

  /// Gets the object at the specified index. Cast the object to the native type
  /// to access its specific properties.
  HRESULT GetValueAtIndex([in] UINT32 index,
      [out, retval] IUnknown** value);
}

/// Extension of WebMessageReceivedEventArgs to provide access to additional
/// WebMessage objects.
[uuid(0761eee6-cf3e-46a4-a6c0-b805d4be5e69), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalWebMessageReceivedEventArgs : IUnknown {
  /// Additional received WebMessage objects. To pass `additionalObjects` via
  /// WebMessage to the app, use the
  /// `chrome.webview.postMessageWithAdditionalObjects` content API.
  /// Any DOM object type that can be natively representable that has been
  /// passed in to `additionalObjects` parameter will be accessible here.
  /// Currently a WebMessage object can be the following type:
  /// - `ICoreWebView2File`.
  /// Entries in the collection can be `nullptr` if `null` or `undefined` was
  /// passed.
  [propget] HRESULT AdditionalObjects(
      [out, retval] ICoreWebView2ExperimentalObjectCollectionView** value);
}
// End of interfaces

}
